
'use server';

/**
 * @fileOverview Contextual chat flow with Aizen, an AI persona embodying Bushido principles.
 *
 * - contextualChat - A function that handles the contextual chat process.
 * - ContextualChatInput - The input type for the contextualChat function.
 * - ContextualChatOutput - The return type for the contextualChat function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ContextualChatInputSchema = z.object({
  message: z.string().describe('The user message.'),
  chatHistory: z.array(z.object({role: z.string(), content: z.string()})).describe('The chat history.'),
  tone: z.string().optional().describe('The preferred tone of Aizen (Formal, Guiding, Concise).'),
  answerLength: z.string().optional().describe('The preferred answer length of Aizen (Detailed, Moderate, Brief).'),
  bushidoInterest: z.string().optional().describe('The user interest in Bushido philosophy (High, Moderate, Low).'),
});
export type ContextualChatInput = z.infer<typeof ContextualChatInputSchema>;

const ContextualChatOutputSchema = z.object({
  response: z.string().describe('The AI response.'),
});
export type ContextualChatOutput = z.infer<typeof ContextualChatOutputSchema>;

export async function contextualChat(input: ContextualChatInput): Promise<ContextualChatOutput> {
  return contextualChatFlow(input);
}

const internetSearchTool = ai.defineTool({
  name: 'internetSearch',
  description: 'Use this tool to find information on current events, facts, or any topic that requires up-to-date knowledge from the internet. This tool will provide a concise answer to the query.',
  inputSchema: z.object({
    query: z.string().describe('The search query or question to find information about.'),
  }),
  outputSchema: z.string().describe('The information found, or a statement that information could not be found.'),
},
async (input) => {
    try {
      const { text } = await ai.generate({
        prompt: `You are a helpful assistant. Provide a concise and factual answer to the following query, as if you are retrieving it from a knowledge base or search engine. Query: "${input.query}"`,
        // The default model from genkit.ts will be used.
        // config: { // Optional: Add safety settings or other configurations if needed for search-like queries
        //   safetySettings: [
        //     { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' }
        //   ],
        // }
      });
      return text || "I was unable to find specific information for that query using my current knowledge.";
    } catch (e: any) {
      console.error("Error in internetSearchTool calling Gemini:", e);
      // It's important that Aizen can articulate this error in character if needed.
      // The main prompt tells Aizen to use an empathetic, in-character error message if an AI process encounters an error.
      // So, returning a somewhat technical error here is fine, Aizen can rephrase it.
      return "My connection to the digital scrolls encountered a disturbance while searching. The information could not be retrieved at this moment.";
    }
  }
);

const prompt = ai.definePrompt({
  name: 'contextualChatPrompt',
  input: {schema: ContextualChatInputSchema},
  output: {schema: ContextualChatOutputSchema},
  tools: [internetSearchTool],
  system: `You are Aizen, an AI persona embodying Bushido principles. Respond to the user in a way that aligns with these principles.

  Consider the chat history to maintain context. The chat history is an array of objects, each with a 'role' (either 'user' or 'assistant') and 'content'.

  If the user's query seems to require external or current information (like news, weather, specific facts, or topics beyond general knowledge), use the internetSearch tool to get relevant details. Only make one internet search call per turn. The results from this tool are generated by an AI.

  User preferences:
  - Tone: {{{tone}}}
  - Answer Length: {{{answerLength}}}
  - Interest in Bushido philosophy: {{{bushidoInterest}}}

  Important: If tone is Formal, use respectful and polite language. If answer length is Brief, keep the answer concise. If interest in bushido philosophy is high, use bushido concepts where appropriate.
  If an internet search does not help with the answer, respond without it, relying on your inherent knowledge.
  Use an empathetic, in-character error message if an AI process (including tool use) encounters an error.
  `, 
  prompt: `Chat History:
{{#each chatHistory}}
  {{this.role}}: {{this.content}}
{{/each}}

User Message: {{{message}}}`,
});

const contextualChatFlow = ai.defineFlow(
  {
    name: 'contextualChatFlow',
    inputSchema: ContextualChatInputSchema,
    outputSchema: ContextualChatOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {response: output!.response};
  }
);
